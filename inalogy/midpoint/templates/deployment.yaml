apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- if (include "midpoint.createSecret" .) }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.metrics.jmx.enabled }}
        checksum/jmx-configuration: {{ include (print $.Template.BasePath "/jmx-configmap.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        {{- if .Values.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ include "midpoint.serviceAccountName" . }}
      {{- include "midpoint.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName | quote }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if or .Values.initContainers .Values.configInit.enabled (and .Values.configInit.enabled .Values.persistence.enabled) }}
      initContainers:
        {{- if .Values.configInit.enabled }}
        ## Image that performs midpoint initialization 
        - name: mp-config-init
          image: {{ include "midpoint.configInit.image" . }}
          imagePullPolicy: {{ .Values.configInit.image.pullPolicy | quote }}
          command: ["/bin/bash","/opt/midpoint/bin/init.sh"]
          env:
            - name: PGHOST
              value: {{ include "midpoint.database.host" . | quote }}
            - name: PGPORT
              value: {{ include "midpoint.database.port" . | quote }}
            - name: PGDATABASE
              value: {{ include "midpoint.database.name" . | quote }}
            - name: PGUSER
              value: {{ include "midpoint.database.username" . | quote }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "midpoint.database.secretName" . }}
                  key: password
            # - name: MP_INIT_CFG
            #   value: /opt/midpoint/initConfig.xml
            - name: MP_CHECK
              value: /opt/midpoint/var/init_in_progress
            - name: MP_PW_DEF
              valueFrom:
                secretKeyRef:
                  name: {{ include "midpoint.secretName" . }}
                  key: keystore-password         
            - name: MP_KEYSTORE
              value:  {{ .Values.keystoreFile | quote }}
            - name: MP_CERT
              value:  {{ .Values.keystoreCert | quote }}
          {{- if .Values.signstore.enabled }}
            - name: MP_CREATE_SIGN_STORE
              value: "true"       
            - name: MP_SIGN_STOREPW
              valueFrom:
                secretKeyRef:
                  name: {{ include "midpoint.secretName" . }}
                  key: signstore-password         
            - name: MP_SIGN_KEYSTORE
              value:  {{ .Values.signstore.file  | quote }}
            - name: MP_SIGN_ALIAS
              value:  {{ .Values.signstore.alias | quote }}
            - name: MP_SIGN_KEY
              value:  {{ .Values.signstore.key | quote }}
            - name: MP_SIGN_LEAFCERT
              value:  {{ .Values.signstore.certificate | quote }}
            - name: MP_SIGN_CHAINCERT
              value:  {{ .Values.signstore.chainCertificate | quote }}
          {{- end }}                   
          volumeMounts:
            - name: mp-home
              mountPath: /opt/midpoint/var
          {{- if .Values.midpoint.additionalConnectors.enabled }}
            - name: mp-extra-connectors
              mountPath: /opt/midpoint/var/connectors.download  
              subPath: connectors.download
          {{- end }}                   
          {{- if .Values.midpoint.sql.enabled  }}
            - name: mp-sql
              mountPath: /opt/midpoint/var/extra-sql
          {{- end }}                   
          {{- if .Values.midpoint.poi.enabled  }}
            - name: mp-poi
              mountPath: /opt/midpoint/var/init-poi
          {{- end }}
          {{- if .Values.configInit.resources }}
          resources: {{- toYaml .Values.configInit.resources | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- if .Values.initContainers }}
          {{- include "common.tplvalues.render" (dict "value" .Values.initContainers "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: midpoint
          image: {{ include "midpoint.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: POD_NAME
              valueFrom: 
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name          
            - name: MP_SET_file_encoding
              value: UTF8 
            - name: MP_SET_midpoint_repository_database
              value: postgresql
            - name: MP_SET_midpoint_repository_jdbcUsername
              value: {{ include "midpoint.database.username" . | quote }}
            - name: MP_SET_midpoint_repository_jdbcPassword
              valueFrom:
                secretKeyRef:
                  name: {{ include "midpoint.database.secretName" . }}
                  key: password
            - name: MP_SET_midpoint_repository_jdbcUrl
              value: {{ include "midpoint.database.url" . | quote }}
            - name: MP_UNSET_midpoint_repository_hibernateHbm2ddl
              value: "1"
            - name: MP_NO_ENV_COMPAT
              value: "1"
            - name: MP_CHECK
              value: /opt/midpoint/var/init_in_progress              
            - name: INALOGY_DEBUG
              value: {{ ternary "true" "false" (or .Values.image.debug .Values.diagnosticMode.enabled) | quote }}
            # - name: MP_INIT_CFG
            #   value: /opt/midpoint/initConfig.xml
            - name: MP_START_TIMEOUT
              value: {{ .Values.startTimeout | quote }}
            - name: MP_DATABASE_HOST
              value: {{ include "midpoint.database.host" . | quote }}
            - name: MP_DATABASE_PORT_NUMBER
              value: {{ include "midpoint.database.port" . | quote }}
            - name: MP_DATABASE_NAME
              value: {{ include "midpoint.database.name" . | quote }}
            - name: MP_DATABASE_USER
              value: {{ include "midpoint.database.username" . | quote }}
            - name: MP_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "midpoint.database.secretName" . }}
                  key: password
            {{- if .Values.smtpHost }}
            - name: MP_SMTP_HOST
              value: {{ .Values.smtpHost | quote }}
            {{- end }}
            {{- if .Values.smtpPort }}
            - name: MP_SMTP_PORT
              value: {{ .Values.smtpPort | quote }}
            {{- end }}
            {{- if .Values.smtpUser }}
            - name: MP_SMTP_USER
              value: {{ .Values.smtpUser | quote }}
            {{- end }}
            {{- if or .Values.smtpPassword .Values.smtpExistingSecret }}
            - name: MP_SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "midpoint.smtpSecretName" . }}
                  key: smtp-password
            {{- end }}
            {{- if .Values.smtpProtocol }}
            - name: MP_SMTP_PROTOCOL
              value: {{ .Values.smtpProtocol | quote }}
            {{- end }}
            - name: MP_PW_DEF
              valueFrom:
                secretKeyRef:
                  name: {{ include "midpoint.secretName" . }}
                  key: keystore-password         
            - name: MP_KEYSTORE
              value:  {{ .Values.keystoreFile | quote }}
            - name: MP_CERT
              value:  {{ .Values.keystoreCert | quote }}
            - name: MP_PORT_NUMBER
              value: {{ .Values.containerPorts.http | quote }}
            {{- if .Values.minHeapSize }}
            - name: MP_MEM_INIT
              value: {{ .Values.minHeapSize | quote }}
            {{- end }}
            {{- if .Values.maxHeapSize }}
            - name: MP_MEM_MAX
              value: {{ .Values.maxHeapSize | quote }}
            {{- end }}
            {{- if .Values.extraProperties }}
            - name: MP_EXTRA_PROPERTIES
              value: {{ join "," .Values.extraProperties | quote }}
            {{- end }}
            {{- if .Values.metrics.jmx.enabled }}
            - name: MP_WEB_JAVA_ADD_OPTS
              value: "-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=10443 -Dcom.sun.management.jmxremote.rmi.port=10444"
            {{- end }}
            {{- if .Values.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.containerPorts.http }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.livenessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /
              port: http
          {{- end }}
          {{- if .Values.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.readinessProbe "enabled") "context" $) | nindent 12 }}
            httpGet:
              path: /
              port: http
          {{- end }}
          {{- if .Values.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.startupProbe "enabled") "context" $) | nindent 12 }}
            tcpSocket:
              port: http
          {{- end }}
          {{- end }}
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: mp-home
              mountPath: /opt/midpoint/var
            - name: mp-config
              mountPath: /opt/midpoint/var/config.xml
              subPath: config.xml
          {{- if .Values.midpoint.schema.enabled  }}
            - name: mp-schema
              mountPath: /opt/midpoint/var/schema
          {{- end }}
          {{- if .Values.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.metrics.jmx.enabled }}
        - name: jmx-exporter
          image: {{ include "midpoint.metrics.jmx.image" . }}
          imagePullPolicy: {{ .Values.metrics.jmx.image.pullPolicy | quote }}
          {{- if .Values.metrics.jmx.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.metrics.jmx.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else }}
          command:
            - java
            - -XX:+UnlockExperimentalVMOptions
            - -XX:+UseCGroupMemoryLimitForHeap
            - -XX:MaxRAMFraction=1
            - -XshowSettings:vm
            - -jar
            - jmx_prometheus_httpserver.jar
            - {{ .Values.metrics.jmx.containerPorts.metrics | quote }}
            - /etc/jmx/midpoint-prometheus.yml
          {{- end }}
          ports:
            - name: metrics
              containerPort: {{ .Values.metrics.jmx.containerPorts.metrics }}
          {{- if .Values.metrics.jmx.resources }}
          resources: {{- toYaml .Values.metrics.jmx.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: jmx-config
              mountPath: /etc/jmx
        {{- end }}
        {{- if .Values.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: mp-home
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ (tpl .Values.persistence.existingClaim .) | default (include "common.names.fullname" .) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        {{- if .Values.metrics.jmx.enabled }}
        - name: jmx-config
          configMap:
            name: {{ printf "%s-jmx-conf" (include "common.names.fullname" .) }}
        {{- end }}
        {{- if .Values.midpoint.sql.enabled  }}
        - name: mp-sql
          configMap:
            name:  {{ include "midpoint.configmap.sql" . }}
        {{- end }}
        {{- if .Values.midpoint.schema.enabled  }}
        - name: mp-schema
          configMap:
            name:  {{ include "midpoint.configmap.schema" . }}
        {{- end }}
        {{- if .Values.midpoint.poi.enabled  }}
        - name: mp-poi
          configMap:
            name:  {{ include "midpoint.configmap.poi" . }}
        {{- end }}
        - name: mp-config
          configMap:
            name: {{ include "midpoint.configmap" . }}
        - name: mp-extra-connectors
          configMap:
            name: {{ include "midpoint.configmap.connectors" . }}  
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
